{"version":3,"sources":["components/Header.js","components/BodyContent.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","BodyContent","React","useState","activities","setActivities","parks","setParks","parkDetails","setParkDetails","webCams","setWebCams","length","fetch","then","data","json","res","activitiesList","useEffect","viewParks","id","parkArray","filter","activity","viewParkDetails","fullName","Promise","park","parkCode","designation","fName","name","states","url","titleArray","push","viewTitle","allActivitiesArray","i","stringKey","toString","onClick","viewAllActivities","viewWebCams","viewAllParks","viewParkActivities","parkActivities","activitiesStr","parkActivitiesArray","map","parkActivity","substring","viewOperatingHours","operatingHours","operatingHoursArray","operatingHour","description","exceptions","standardHours","viewFees","fees","feesArray","fee","cost","title","viewEmails","emails","emailsArray","email","descrption","emailAddress","viewPhoneNumbers","phoneNumbers","phoneNumbersArray","phoneNumberObj","desciption","extension","phoneNumber","type","parkDetailsData","parkDetailsArray","parkDatailsDataObj","contacts","addresses","directionsInfo","directionsUrl","entranceFees","entrancePasses","latLong","images","latitude","longitude","weatherInfo","topic","emailAddresses","viewAllParkDetails","webCamDetailsArr","getImages","imagesArray","imageUrl","altText","caption","credit","crops","src","width","height","getTags","tags","tagsArray","tagsString","webCam","isStreaming","status","relatedParks","statusMessage","viewAllWebCamDetails","Footer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a45a81e.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css'\nconst Header = () => {\n    return <div className=\"headerComponent\"> \n        <h1> National Park Explorer </h1>\n    </div>\n\n}\n\n\nexport default Header","import React from \"react\";\nimport \"./BodyContent.css\";\nconst BodyContent = () => {\n  // setting up useState hooks\n  const [activities, setActivities] = React.useState([]);\n  const [parks, setParks] = React.useState([]);\n  const [parkDetails, setParkDetails] = React.useState([]);\n  const [webCams, setWebCams] = React.useState([]);\n  // if all state arrays are empty, fetch activities and use them to set the activities state\n  const fetchActivitiesUrl = \"https://developer.nps.gov/api/v1/activities/parks?&api_key=q8GWnNoCUOR2WCSbRcNAmBKYbIcN9Qy4zqbcz1JN\";\n  if (activities.length <= 0  && parks.length <= 0 && parkDetails.length == 0 && webCams.length == 0) {\n    fetch(fetchActivitiesUrl)\n      .then((data) => \n      {\n        return data.json();\n      })\n      .then((res) => \n      {\n        let activitiesList = res.data;\n        return setActivities(activitiesList);\n      });\n  }\n  // set up useEffect hook\n  React.useEffect(() => {}, [parkDetails, parks, webCams, activities]);\n  // below are the functions that fetch data and set the state data accordingly\n  // function to fetch webCam data and setWebCams state\n  const viewWebCams = (parkCode) => \n  {\n    const webCamUrl = \"https://developer.nps.gov/api/v1/webcams?parkCode=\" + parkCode + \"&&api_key=EHqD6lQUXiVN62N3hVIQzyCITN4z8RpAjTh5fu01\";\n    fetch(webCamUrl)\n      .then((data) => \n      {\n        return data.json();\n      })\n      .then((res) => \n      {\n        if (res.data.length == 0)\n        {\n          res.data.push(5)\n        }\n        setWebCams(res.data); setParks([]); setActivities([]); setParkDetails([])\n      });\n  };\n  // function to access the parks specific to an activity selected by an user and set parks state accordingly\n  const viewParks = (id) => \n  {\n    let parksData = activities.filter((activity) => activity.id == id);\n    let parkArray = parksData[0].parks;\n    setActivities([]);\n    setParks(parkArray);\n    setParkDetails([]);\n    setWebCams([])\n  };\n  // function to retrieve additional information for park and set parksDetails state accordingly\n  const viewParkDetails = (fullName) => \n  {\n    const myPromise = new Promise(() => \n    {\n      const parkDetailObj = parks.filter((park) => park.fullName == fullName);\n      const {designation, fName, name, parkCode, states, url} = parkDetailObj[0]\n      const parkDetailsUrl = \"https://developer.nps.gov/api/v1/parks?parkCode=\" + parkCode + \"&api_key=q8GWnNoCUOR2WCSbRcNAmBKYbIcN9Qy4zqbcz1JN\"\n      fetch(parkDetailsUrl)\n      .then((data)=> \n      {\n        return data.json()\n      })\n      .then((res)=> \n      {\n         setParkDetails(res); setParks([]); setActivities([]); setWebCams([])\n      })\n    });\n  };\n  // below are the functions that use the data in the current state to populate the DOM\n  // below function populates the DOM with a list of all activities\n  const viewAllActivities = (activities) => \n  {\n    let allActivitiesArray = [];\n    for (let i = 0; i < activities.length; i++) \n    {\n      const activity = activities[i];\n      const { id, name, parks } = activity;\n      let stringKey = i.toString()\n      allActivitiesArray.push\n      (\n        <div className=\"activities\" key={stringKey}>\n          <h2 className=\"tileTitle\">{name}</h2>\n          <button onClick={() => viewParks(id)}>view parks</button>\n        </div>\n      );\n    }\n    return allActivitiesArray;\n  };\n  // below function populates the DOM with a list of all parks\n  const viewAllParks = (parks) => \n  {\n    let parkArray = [];\n    for (let i = 0; i < parks.length; i++) \n    {\n      const park = parks[i];\n      const { designation, fullName, name, parkCode, states, url } = park;\n      parkArray.push\n      (\n        <div className=\"parks\">\n          <h2 className=\"tileTitle\"> {fullName}</h2>\n          <button className=\"button\"\n            onClick={() => {\n              viewParkDetails(fullName);\n            }}>\n            view park details\n          </button>\n          <button className=\"button\"\n            onClick={() => {\n              viewWebCams(parkCode);\n              }}>\n              view images\n          </button>\n        </div>\n      );\n    }\n    return parkArray;\n  };\n  // below function populates the DOM with all the park details information\n  const viewAllParkDetails = (parkDetails) => \n  {\n    // below is a helper function used by viewAllParkDetails to access a string of all available activities for a specific park\n    const viewParkActivities = (parkActivities)=>\n    {\n      let activitiesStr = \"\"\n      let parkActivitiesArray = []\n      parkActivities.map((parkActivity)=> {\n         const {id, name} = parkActivity\n         activitiesStr  = activitiesStr + \", \" + name\n      })\n      activitiesStr = activitiesStr.substring(1)\n       parkActivitiesArray.push(activitiesStr)\n       return parkActivitiesArray\n    };\n    // below is a helper function used by viewAllParkDetails to parse through the list of all operating hours for a specific park\n    const viewOperatingHours = (operatingHours)=>\n    {\n      let operatingHoursArray = []\n      operatingHours.map((operatingHour)=>\n      {\n        const {description, exceptions, name, standardHours} = operatingHour;\n        operatingHoursArray.push( <p> {description}</p>)\n      })\n      return operatingHoursArray \n    }\n    // below is a helper function used by viewAllParkDetails to parse through the list of all fees for a specific park\n    const viewFees = (fees)=>\n    {\n      let feesArray = []\n      fees.map((fee)=> \n      {\n        const {cost, description, title} = fee\n        feesArray.push\n        (\n          <div>\n              <h4> {title}</h4>\n              <p>{description}</p>\n              <p> Cost: ${cost}</p>\n          </div>\n        )\n      })\n    return feesArray\n    }\n    // below is a helper function used by viewAllParkDetails to parse through the list of all emails for a specific park\n    const viewEmails = (emails)=> \n    {\n      let emailsArray = []\n      emails.map((email)=> \n      {\n        const {descrption, emailAddress} = email\n        emailsArray.push\n        (\n          <p> {emailAddress}</p>\n        )\n      })\n      return emailsArray \n    }\n    // below is a helpful function used by viewAllParkDetails to parse through a list of all phone numbers for a specific park\n    const viewPhoneNumbers = (phoneNumbers)=>\n    {\n      let phoneNumbersArray = []\n      phoneNumbers.map((phoneNumberObj)=>\n      {\n        const {desciption, extension, phoneNumber, type} = phoneNumberObj\n        phoneNumbersArray.push\n        (\n          <div>\n            <p> {type}: {phoneNumber}</p>\n          </div>\n        )\n      })\n      return phoneNumbersArray\n    }\n    let parkDetailsData = parkDetails.data\n    let parkDetailsArray = []\n    if (parkDetailsData)\n    {\n      if (parkDetailsData.length>0)\n      {\n        parkDetailsData.map((parkDatailsDataObj)=>\n        {\n          const {activities, addresses, contacts, description, designation, directionsInfo, directionsUrl, entranceFees, entrancePasses, fees, fullName, id, images, latLong, latitude, longitude, name, operatingHours, parkCode, states, topic, url, weatherInfo} = parkDatailsDataObj\n          const {emailAddresses, phoneNumbers} = contacts;\n          // adding all the parkDetails as a jsx element to the parkDetailsArray (which is returned by the function)\n          parkDetailsArray.push\n          (\n            <div>\n              <div className=\"detailsContent\">\n              <h1> {fullName}</h1>\n              </div>\n              <div className=\"detailsContent\">\n              <h3> Operating Hours</h3>\n              {viewOperatingHours(operatingHours)}\n              </div>\n              <div className=\"detailsContent\">\n              <h3> Contact Information</h3>\n              <h4> {viewEmails(emailAddresses)}</h4>\n              <h4> {viewPhoneNumbers(phoneNumbers)}</h4>\n              </div>\n              <div className=\"detailsContent\">\n              <h3> Description: </h3>\n              <p>{description}</p>\n              </div>\n              <div className=\"detailsContent\">              \n                <h3> Weather Information</h3>\n              <p> {weatherInfo}</p>\n              </div>\n              <div className=\"detailsContent\">\n                <h3> Location</h3>\n              <p>Latitude Longitude : {latLong}</p>\n              <p> State: {states}</p>\n              </div>\n              <div className=\"detailsContent\">\n              <h3> Fees</h3>\n              {viewFees(entranceFees)}\n              </div>\n              <div className=\"detailsContent\">\n              <h3> Direction Information</h3>\n              <p>{directionsInfo}</p>\n              </div>\n              <div  className=\"detailsContent\">\n              <h3> Directions Link</h3>\n              <p>{directionsUrl}</p>\n              </div>\n              <div  className=\"detailsContent\">\n              <h3> Activities available</h3>\n                {viewParkActivities(activities)}\n              </div>\n            </div>\n          )\n        })\n      }\n    }\n    return parkDetailsArray\n  };\n  // below function populates the DOM with all the web cam information\n  const viewAllWebCamDetails = (webCams) => \n  {\n    let webCamDetailsArr = [];\n    if ( webCams.length >0  && webCams[0] === 5) \n    {\n      webCamDetailsArr.push\n      (\n        <div>\n          <h3>\n            Unfortunately, no web cam data is available for this park. \n          </h3>\n          <br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br> <br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br>\n          <br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br> <br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br>\n          <br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br> <br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br>    \n        </div>\n      );\n      return webCamDetailsArr;\n    }\n    // below function is a helper function used by viewAllWebCamDetails to parse through a list of images specific to the webcam\n    const getImages = (images) => {\n      let imagesArray = [];\n      if (images.length == 0) {\n        return (\n          <div>\n            <h4>\n              Unfortunately no images are currently available from this specific\n              webcam.\n            </h4>\n          </div>\n        );\n      } \n      else \n      {\n        for (let i = 0; i < images.length; i++) {\n          const {imageUrl, altText, caption, credit, crops, description,title, url,} = images[i];\n          imagesArray.push\n          (\n            <div>\n              <img src={url} width=\"240\" height=\"180\" />\n            </div>\n          );\n        }\n      }\n      return imagesArray;\n    };\n    // below is a helper function used by viewAllWebCamDetails to parse through a list of all tags specific to a webcam\n    const getTags = ((tags)=> \n    {\n      let tagsArray = []\n      let tagsString   = \"\"\n      for (let i = 0; i <tags.length; i++)\n      {\n        tagsString = tagsString + \", \" + tags[i]\n      }\n      tagsString = tagsString.substring(1)\n      tagsArray.push(tagsString)\n      return tagsArray\n    })\n    for (let i = 0; i < webCams.length; i++) \n    {\n      const webCam = webCams[i];\n      const {description,id,images,isStreaming,latitude,longitude,relatedParks,status,statusMessage,tags,title,url,} = webCam;\n      webCamDetailsArr.push(\n        <div className=\"imageTile\">\n          <h2>{title}</h2>\n          <h5> Status: {status}</h5>\n          {getImages(images)}\n          <h6>\n            Coordinates of park camera: {latitude} , {longitude}\n          </h6>\n          <p className=\"descriptionText\"> Description: {description}</p>\n          <p className=\"descriptionText\"> Related tags: {getTags(tags)}</p>\n          <p className=\"descriptionText\">  Site Link: {url}</p>\n        </div>\n      );\n    }\n    return webCamDetailsArr;\n  };\n  // below is a function that populates the title based on the current state of the app\n  const viewTitle = () => \n  {\n    let titleArray = [];\n    if (activities.length != 0 &&parks.length == 0 &&webCams.length == 0 &&parkDetails.length == 0) \n    {\n      titleArray.push\n      (\n        <div>\n          <h1 className=\"tileTitle\">Search Through Popular Activities!</h1>\n        </div>\n      );\n      return titleArray;\n    } else if (activities.length == 0 && parks.length != 0 && webCams.length == 0 && parkDetails.length == 0) \n    {\n      titleArray.push\n      (\n        <div>\n          <h1 className=\"tileTitle\"> View Parks That Offer Your Selected Activity</h1>\n        </div>\n      );\n      return titleArray;\n    } else if (activities.length == 0 && parks.length == 0 && webCams.length != 0 && parkDetails.length == 0) \n    {\n      titleArray.push\n      (\n        <div>\n          <h1 className=\"tileTitle\"> View Images From Our Web Cams</h1>\n        </div>\n      );\n      return titleArray;\n    } \n    else if (activities.length == 0 && parks.length == 0 && webCams.length == 0 && parkDetails.length != 0) \n    {\n      titleArray.push\n      (\n        <div>\n          <h1 className=\"tileTitle\">View Details of Selected Park</h1>\n        </div>\n      );\n      return titleArray;\n    }\n  };\n  // below is the return statement for the component which assists in returning the data for the component\n  return (\n    <div className=\"background-green\">\n      <div className=\"header\">{viewTitle()}</div>\n      {viewAllActivities(activities)}\n\n      {viewAllParks(parks)}\n      {viewAllParkDetails(parkDetails)}\n      {viewAllWebCamDetails(webCams)}\n    </div>\n  );\n};\nexport default BodyContent;","import React from 'react'\nimport './Footer.css'\nconst Footer = () => {\n    return <div className=\"footerComponent\">\n        <div> National Park Explorer allows you to explore National Parks from the comfort of your device!</div>\n          <div> Developed by Pavan Alluri using the National Park Service API and React.js. Hosted on Github Pages.</div>\n        </div>\n\n}\n\n\nexport default Footer","import './App.css';\nimport Header from './components/Header'\nimport BodyContent from './components/BodyContent'\nimport Footer from './components/Footer'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <BodyContent/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}