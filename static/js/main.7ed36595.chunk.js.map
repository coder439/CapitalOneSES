{"version":3,"sources":["components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Header","console","log","copyList","fetch","then","data","json","res","activitiesList","i","length","push","React","useState","activities","setActivities","parks","setParks","parkDetails","setParkDetails","webCams","setWebCams","useEffect","viewParks","id","parkArray","filter","activity","map","park","viewParkDetails","fullName","Promise","parkDetailObj","parkDetailsArr","a","onClick","createsReload","returnArr","viewHeader","name","viewActivity1","designation","parkCode","states","url","viewImages","viewAllParks","parkDetail","viewAllParkDetails","getImages","images","returnArr1","imageUrl","altText","caption","credit","crops","description","title","src","width","height","webCam","isStreaming","latitude","longitude","relatedParks","status","statusMessage","tags","viewAllWebCamDetails","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ed36595.chunk.js","sourcesContent":["import { act } from \"react-dom/cjs/react-dom-test-utils.production.min\"\nimport React from 'react'\nimport { PLACEHOLDERS_FLIPPED_ALIAS } from \"@babel/types\"\nconst Header = () => {\n    console.log(\"rerender\")\n    const Url = \"https://developer.nps.gov/api/v1/activities/parks?&api_key=EHqD6lQUXiVN62N3hVIQzyCITN4z8RpAjTh5fu01\"\n    var copyList = []\n    fetch(Url)\n    .then(data=>{return data.json()})\n    .then(res=>{\n        var activitiesList = (res.data)\n        for (let i = 0; i <activitiesList.length; i++){\n            copyList.push(activitiesList[i])\n        }\n\n    }).then(console.log(copyList))\n    \n    const [activities , setActivities] = React.useState(copyList);\n    const [parks, setParks] = React.useState([]);\n    const [parkDetails, setParkDetails] = React.useState([]);\n    const [webCams, setWebCams] = React.useState([]);\n    \n   \n    React.useEffect(() => {\n\n        setParkDetails(parkDetails)\n        setActivities(activities)\n        setParks(parks)\n        setWebCams(webCams)\n\n    }, [parkDetails, parks, webCams, activities])\n\n    const viewImages = (parkCode)=>{\n        console.log(\"inside view Images\")\n        console.log(parkCode)\n        const URL  ='https://developer.nps.gov/api/v1/webcams?parkCode=' + parkCode + '&&api_key=EHqD6lQUXiVN62N3hVIQzyCITN4z8RpAjTh5fu01'\n        fetch(URL)\n        .then(data=> {return data.json()})\n        .then(res=>{\n            setWebCams(res.data)\n            console.log(webCams)\n        })\n        .then(setActivities([]), setParks([]), setParkDetails([]))\n\n    }\n    const viewParks = (id)=> {\n        let park = activities.filter((activity)=> activity.id == id)\n        let parkArray = park[0].parks\n        setActivities([])\n        setParks(parkArray)\n        setParkDetails([])\n        parkArray.map((park)=> {\n            return (\n                <div>\n                <p> yoooo</p>\n                </div>\n            );\n        })\n\n    } \n    const viewParkDetails = (fullName)=> {\n        const myPromise = new Promise(()=> {\n            console.log(\"in park details\")\n            const parkDetailObj = parks.filter((park)=> park.fullName == fullName)\n            const parkDetailsArr = []\n            parkDetailsArr.push(parkDetailObj)\n            setParkDetails(parkDetailsArr)\n            console.log(parkDetailsArr)\n            setParks([])\n            setActivities([])\n            \n\n        })\n\n    }\n\n    const viewActivity1 = (activities)=> {\n        var returnArr = []\n        for (let i =0; i < activities.length; i++ )\n        {\n        const activity = activities[i]\n        const {id, name, parks} = activity;\n\n        returnArr.push(\n\n            <div >\n            <h4>{name}</h4>\n            <button onClick = {()=> viewParks(id)}>view parks</button>\n            </div>\n        )\n        }\n        console.log(parks)\n            return returnArr\n\n    }\n    const viewAllParks = (parks)=>{\n        console.log(\"park data below\")\n        console.log(parks)\n        var returnArr = []\n        for (let i  =0; i < parks.length; i++){\n            const park = parks[i]\n            const {designation, fullName, name, parkCode, states, url} = park;\n            returnArr.push(\n                    <div >\n                        <h4> {fullName}</h4>\n                        <button onClick = {()=> {\n                            console.log(fullName)\n                            viewParkDetails(fullName)  \n                            }}> view park details</button>\n                        <button onClick = {()=> {\n                            viewImages(parkCode)\n                            \n                            }}> view images</button>\n                        </div>\n\n                )\n        }\n\n        console.log(returnArr)\n        return returnArr\n    }\n    const viewAllParkDetails = (parkDetails)=> {\n        var returnArr = []\n        for (let i = 0; i < parkDetails.length; i++){\n            const parkDetail = parkDetails[i]\n            console.log(parkDetail)\n            const {designation, fullName, name, parkCode, states, url} = parkDetail[0];\n            console.log(designation)\n            returnArr.push (\n                <div>\n                    <h1>{fullName}</h1>\n                    <h2>Designation: {designation}</h2>\n                    <h4>Location: {states}</h4>\n                    <h4>Park Code: {parkCode}</h4>\n                    <h4>Link to park's webpage where you can learn more: {url}</h4>\n                    \n                    </div>\n            );\n\n\n        }\n        return returnArr\n    }\n    const viewAllWebCamDetails = (webCams) =>{\n        var returnArr = []\n        console.log(webCams)\n        if (activities.length == 0 && parks.length == 0 && webCams.length == 0  && parkDetails.length == 0){\n            console.log(\"yo yo yo all empty\")\n            returnArr.push(\n\n                <div>\n                    <h3> Unfortunately, no web cam data is available for this park. Please use the reload button above to navigate back to the home page</h3>\n                </div>\n\n            )\n            return returnArr\n        }\n        const getImages = (images)=>{\n            var returnArr1 = []\n            if (images.length == 0){\n\n                return <div>\n                    <h4> Unfortunately no images are currently available from this specific webcam</h4>\n                </div>\n\n            }\n            else {\n                for (let i = 0; i < images.length; i++){\n                    console.log(images[i])\n                    const {imageUrl, altText, caption, credit, crops, description, title, url} = images[i]\n                    console.log(url)\n                    returnArr1.push(\n                        <div>\n                        <h6> image below</h6>\n                        <img src={url}  width=\"240\" height=\"180\"  />\n                        </div>\n\n                    )\n\n                }\n            }\n            return returnArr1\n        }\n\n\n        for (let i =0; i < webCams.length; i++){\n            const webCam = webCams[i]\n            const {description, id, images, isStreaming, latitude, longitude, relatedParks, status, statusMessage, tags, title, url} = webCam\n            console.log(description)\n            console.log(images)\n            console.log(isStreaming)\n            console.log(longitude)\n            console.log(latitude)\n            console.log(relatedParks)\n            console.log(status)\n            console.log(statusMessage)\n            console.log(tags)\n            console.log(title)\n            console.log(url)\n            returnArr.push (\n                <div>\n                    \n\n                    <h2>{title}</h2>\n                    {/* var img = document.createElement('img') */}\n                    {/* img.src = {images[0]} */}\n                    {/* document.getElementById('root').appendChild(img) */}\n                    {getImages(images)}\n\n                    <h5> Status: {status}</h5>\n                    <h6> Coordinates of park camera: {latitude} , {longitude}</h6>\n                    <p> Description: {description}</p>\n                    <p> Related tags: {tags}</p>\n                    <p> url to site: {url}</p>\n                </div>\n            )\n       \n        }\n        return returnArr\n\n\n    }\n    const viewHeader = () =>{\n        var returnArr = []\n        console.log(activities.length)\n        console.log(parks.length)\n        console.log(parkDetails.length)\n        console.log(webCams.length)\n        if (activities.length != 0 && parks.length == 0 && webCams.length == 0  && parkDetails.length == 0){\n            console.log(\"yo yo yo yo \")\n            returnArr.push(\n\n                <div>\n                    <h1>\n                        View All available activities below!!\n                    </h1>\n                </div>\n\n            )\n            return returnArr\n\n        }\n        else if (activities.length == 0 && parks.length != 0 && webCams.length == 0  && parkDetails.length == 0){\n            returnArr.push(\n                <div>\n                    <h1> View All available parks below</h1>\n                </div>\n            )\n            return returnArr\n\n        }\n        else if (activities.length == 0 && parks.length == 0 && webCams.length != 0  && parkDetails.length == 0){\n            returnArr.push(\n                <div>\n                    <h1> View All web cam data below</h1>\n                </div>\n            )\n            return returnArr\n\n        }\n        else if (activities.length == 0 && parks.length == 0 && webCams.length == 0  && parkDetails.length != 0){\n            returnArr.push(\n                <div>\n                    <h1> View All park details data below</h1>\n                </div>\n            )\n            return returnArr\n\n        }\n        \n    \n    }\n    \n\n    async function createsReload (){\n        console.log(\"in reload\")\n        const Url = \"https://developer.nps.gov/api/v1/activities/parks?&api_key=EHqD6lQUXiVN62N3hVIQzyCITN4z8RpAjTh5fu01\"\n        var copyList = []\n        fetch(Url)\n        .then(data=>{return data.json()})\n        .then(res=>{\n            var activitiesList = (res.data)\n            setActivities(activitiesList)\n            console.log(activitiesList.length)\n            for (let i = 0; i <activitiesList.length; i++){\n                copyList.push(activitiesList[i])\n            }\n    \n        }).then(setActivities([]), setParks([]), setWebCams([]), setParkDetails([]))\n        \n    }\n\n    \n\n    console.log(\"halfway\")\n    return (\n        <div>\n             <button onClick = {()=> {\n                 createsReload()\n                            \n                            \n                            }}> reload</button>\n            <h6> Please use above reload button instead of the actual reload button</h6>\n            \n            {viewHeader()}\n            {viewActivity1(activities)}\n        \n            {viewAllParks(parks)}\n            {viewAllParkDetails(parkDetails)}\n            {viewAllWebCamDetails(webCams)}      \n          \n    \n        </div>\n    );\n\n};\n\n\n// so what we want to do is have an if else for one state (hook)\n// two states \n// one would haev curr data one has whole data\n// check whats in curr data, using if else, and return accordingly \n// have one backup state w everything  \n// create new back button that would set state to default state \n\n\n\n//  {/* <p> dNX918hslulco1WPSr7Vcgc8pDFklxHQXVvQvcvk</p>\n//             <p>https://developer.nps.gov/api/v1//activities&api_key=dNX918hslulco1WPSr7Vcgc8pDFklxHQXVvQvcvk</p> */}\n//             {/* <button onClick = {() => setActivities([copyList])}>button to click</button> */}\n\nexport default Header","import './App.css';\nimport Header from './components/Header'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}